package com.alibaba.craftsman.repository;

import com.alibaba.cola.logger.Logger;
import com.alibaba.cola.logger.LoggerFactory;
import com.alibaba.craftsman.convertor.MetricConvertor;
import com.alibaba.craftsman.common.util.DomainEventPublisher;
import com.alibaba.craftsman.domain.metrics.MainMetricType;
import com.alibaba.craftsman.domain.metrics.MetricItem;
import com.alibaba.craftsman.domain.metrics.SubMetric;
import com.alibaba.craftsman.domain.metrics.SubMetricType;
import com.alibaba.craftsman.domain.metrics.appquality.AppMetric;
import com.alibaba.craftsman.domain.metrics.appquality.AppMetricItem;
import com.alibaba.craftsman.domain.metrics.devquality.BugMetric;
import com.alibaba.craftsman.domain.metrics.devquality.BugMetricItem;
import com.alibaba.craftsman.domain.metrics.techcontribution.*;
import com.alibaba.craftsman.domain.metrics.techinfluence.*;
import com.alibaba.craftsman.dto.domainevent.MetricItemCreatedEvent;
import com.alibaba.craftsman.tunnel.database.MetricTunnel;
import com.alibaba.craftsman.tunnel.database.dataobject.MetricDO;
import com.alibaba.craftsman.tunnel.rpc.AppMetricTunnel;
import com.alibaba.craftsman.tunnel.rpc.BugMetricTunnel;
import com.alibaba.craftsman.tunnel.rpc.dataobject.AppMetricDO;
import com.alibaba.craftsman.tunnel.rpc.dataobject.BugMetricDO;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

/**
 * 度量指标的仓储层
 * @author xueliang.sxl, alisa.hsh, xiangning.lxn
 */
@Repository
public class MetricRepository {

    private static Logger logger = LoggerFactory.getLogger(MetricRepository.class);

    @Autowired
    private MetricTunnel metricTunnel;

    @Autowired
    private BugMetricTunnel bugMetricTunnel;

    @Autowired
    private AppMetricTunnel appMetricTunnel;

    @Autowired
    private DomainEventPublisher domainEventPublisher;


    public void save(MetricItem metricItem){
        MetricDO metricDO = MetricConvertor.toDataObject(metricItem);

        metricTunnel.create(metricDO);

        logger.debug("AutoGeneratedId: "+metricDO.getId());
        MetricItemCreatedEvent metricItemCreatedEvent = new MetricItemCreatedEvent();
        metricItemCreatedEvent.setId(metricDO.getId());
        metricItemCreatedEvent.setUserId(metricDO.getUserId());
        metricItemCreatedEvent.setMainMetricType(metricDO.getMainMetric());
        domainEventPublisher.publish(metricItemCreatedEvent);
    }


    public List<SubMetric> listByTechContribution(String userId){
        List<MetricDO> metricDOList = metricTunnel.listByMainMetric(userId, MainMetricType.TECH_CONTRIBUTION.getMetricCode());
        RefactoringMetric refactoringMetric = new RefactoringMetric();
        MiscMetric miscMetric = new MiscMetric();
        CodeReviewMetric codeReviewMetric = new CodeReviewMetric();
        List<SubMetric> subMetricList = new ArrayList<>();
        subMetricList.add(refactoringMetric);
        subMetricList.add(miscMetric);
        subMetricList.add(codeReviewMetric);
        metricDOList.forEach(metricDO -> {
            String json = metricDO.getMetricItem();
            switch (SubMetricType.valueOf(metricDO.getSubMetric())){
                case Refactoring:
                    refactoringMetric.addMetricItem(RefactoringMetricItem.valueOf(json));
                    break;
                case Misc:
                    miscMetric.addMetricItem(MiscMetricItem.valueOf(json));
                    break;
                case CodeReview:
                    codeReviewMetric.addMetricItem(CodeReviewMetricItem.valueOf(json));
                    break;
                default:
                    logger.error("illegal SubMetric type: " + metricDO.getSubMetric());
            }
        });
        return subMetricList;
    }

    public List<SubMetric> listByTechInfluence(String userId){
        List<MetricDO> metricDOList = metricTunnel.listByMainMetric(userId, MainMetricType.TECH_INFLUENCE.getMetricCode());
        ATAMetric ataMetric = new ATAMetric();
        SharingMetric sharingMetric = new SharingMetric();
        PatentMetric patentMetric = new PatentMetric();
        PaperMetric paperMetric = new PaperMetric();
        List<SubMetric> subMetricList = new ArrayList<>();
        subMetricList.add(ataMetric);
        subMetricList.add(sharingMetric);
        subMetricList.add(patentMetric);
        subMetricList.add(paperMetric);
        metricDOList.forEach(metricDO -> {
            String json = metricDO.getMetricItem();
            switch (SubMetricType.valueOf(metricDO.getSubMetric())){
                case ATA:
                    ataMetric.addMetricItem(ATAMetricItem.valueOf(json));
                    break;
                case Sharing:
                    sharingMetric.addMetricItem(SharingMetricItem.valueOf(json));
                    break;
                case Patent:
                    patentMetric.addMetricItem(PatentMetricItem.valueOf(json));
                    break;
                case Paper:
                    paperMetric.addMetricItem(PaperMetricItem.valueOf(json));
                default:
                    logger.error("illegal SubMetric type: " + metricDO.getSubMetric());
            }
        });
        return subMetricList;
    }

    public BugMetric getBugMetric(String userId){
        BugMetricDO bugMetricDO = bugMetricTunnel.getByUserId(userId);
        BugMetricItem bugMetricItem = new BugMetricItem(bugMetricDO.getBugCount(), bugMetricDO.getCheckInCodeCount());
        BugMetric bugMetric = new BugMetric();
        bugMetric.addMetricItem(bugMetricItem);
        return bugMetric;
    }

    public AppMetric getAppMetric(String userId){
        List<AppMetricDO> appMetricDOList = appMetricTunnel.listByUserId(userId);
        AppMetric appMetric = new AppMetric();
        appMetricDOList.forEach(appMetricDO -> {
            AppMetricItem appMetricItem = new AppMetricItem();
            BeanUtils.copyProperties(appMetricDO, appMetricItem);
            appMetric.addMetricItem(appMetricItem);
        });
        return appMetric;
    }
}

